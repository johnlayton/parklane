<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <script src="/socket.io/socket.io.js"></script>
    <link   rel='stylesheet' href='/stylesheets/gantt.css' />
  </head>
  <body>

    <div id="chart">
    </div>

    <script src="/browserify.js"></script>

    <script>

      var util     = require('util');
      var traverse = require('traverse');
      var d3       = require('d3');
      var _        = require('underscore');
      var $        = require('jquery-browserify');
      var merge    = require('/lib/obj-merge.js');

      var m = [20, 20, 20, 20],
          w = 1280 - m[1] - m[3],
          h =  800 - m[0] - m[2],
          i = 0,
          duration = 500,
          root;

      var tree = d3.layout.tree()
        .size([h, 100]);

      var vis = d3.select("#chart").append("svg")
        .attr("width",  w + m[1] + m[3])
        .attr("height", h + m[0] + m[2])
        .append("g")
        .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      $.ajax({
        url: '../json/<%= parent %>',
        dataType: 'json',
        data: { 
          name: '<%= name %>',
          from: new Date( '<%= from %>' ).toJSON(),
          to:   new Date( '<%= to %>' ).toJSON() 
        },
        success: function(json) {
          json.x0 = 0;
          json.y0 = 0;
          draw( root = json )
        }
      });

      function label( node ) {
//        return node.name + ( node._children ? " - (" + node._children.length + ")" : "" );
        return node.name + ( ( node.children && node.collapsed ) ? " - (" + node.children.length + ")" : "" );
      }

      function collapse( d ) {
        if ( d.children ) {
          d._children = d.children;
          d._children.forEach( collapse );
          d.children = null;
        }
        return d
      }

      function click( d ) {
        /*
        if ( d.children ) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        */
        d.collapsed = !d.collapsed
        draw( d );
      }

      function draw( json ) {

        var t0 = new Date( '<%= from %>' ),
            t1 = new Date( '<%= to %>' );

        var x0 = d3.time.scale().domain([t0, t1]).range([100, w]);

        // ================================================================================
        // Axis Ticks
        // ================================================================================

        var format = d3.time.format("%m/%d");

        var ticks = vis.selectAll("g.tick")
          .data(x0.ticks(20))

        var tickEnter = ticks.enter().append("svg:g")
          .attr("class", "tick")
          .attr("transform", function(d) { 
            return "translate(" + x0(d) + "," + 20 + ")"; 
          });

        tickEnter.append("svg:line")
          .attr("y1", 20)
          .style("stroke", "#000")
          .style("stroke-width", "1.5px");

        tickEnter.append("svg:line")
          .attr("y1", h / 2)
          .style("stroke", "#bbb")
          .style("stroke-width", "1.5px");

        tickEnter.append("svg:text")
          .attr("y", -15)
          .attr("dy", ".71em")
          .attr("text-anchor", "middle")
          // .style("font", "10px sans-serif")
          .text(format);

        // ================================================================================
        // Task Tree
        // ================================================================================

        var nodes = tree.nodes( root );

        nodes.forEach(function(d, index) { 
          d.x = 0;
          d.y = ( 20 + ( index * 25 ) );
        });

        tree.children(function( node ) {
          return node.collapsed ? [] : node.children;
        });

        var tasks = vis.selectAll("g.task")
          .data(nodes, function( d, index ) {
            return d.index || ( d.index = ++i );
//            return d.id;
          });
 
        // ================================================================================
        // Task Entry Strategy
        // ================================================================================

        var taskEnter = tasks.enter().append("svg:g")
          .attr("class", "task")
          .style("opacity", 1e-6)
          .attr("transform", function(d) { 
            return "translate(" + d.x + "," + d.y + ")"; 
          })

        taskEnter.transition()
            .duration(duration)
            .attr("transform", function(d) { 
              return "translate(" + d.x0 + "," + d.y0 + ")"; 
            })
            .style("opacity", 1);

        taskEnter.append("svg:text")
          .attr("class", "label")
          .attr("transform", function(d) { 
            return "translate(" + ( ( d.depth * 10 ) + 10 ) + "," + 20 + ")"; 
          })
          .text(function(d) { 
            return label( d ); 
          })
          .on("click", click)
        // .on( "click", function(d) {
        //   window.open( d.link, "_self" )
        // });

        // taskEnter.append("svg:text")
        //   .attr("class", "meta")

        taskEnter.append("svg:circle")  
          .attr("class", "twister")
          .attr("r", 4.5)
          .attr("transform", function(d) { 
            return "translate(" + ( d.depth * 10 ) + "," + 14 + ")"; 
          })
          .style("fill", function(d) { 
        //    return d._children ? "lightsteelblue" : "#fff";
            return ( d.children && d.collapsed ) ? "lightsteelblue" : "#fff";
          })
          .on("click", click);
         
        // ================================================================================
        // Task Update Strategy
        // ================================================================================

        var taskUpdate = tasks.transition()
          .duration(duration)
          .attr("transform", function(d) { 
            return "translate(" + d.x + "," + d.y + ")"; 
          });

        taskUpdate.selectAll("text")
          .text(function(d) { 
            return label( d ); 
          })

        taskUpdate.selectAll("circle")
          .attr("r", 4.5)
          .style("fill", function(d) { 
            //return d._children ? "lightsteelblue" : "#fff";
            return ( d.children && d.collapsed ) ? "lightsteelblue" : "#fff";
          });

        // ================================================================================
        // Gantt layout - Valid Tasks
        // ================================================================================

        var valid = taskEnter.selectAll("g.valid")
          .data( function(node, index) { 
            if ( node.valid ) {
              return _.map( node.valid, function( valid ) { return { 
                  id: node.id
                , idx: index  
                , name: node.name
                , start: valid.start
                , finish: valid.finish  
              } } );
            } else {
              return [];
            }
          })

        var validEnter = valid.enter()
          .append("svg:g")
          .attr("class", "valid")
          .attr("transform", function( valid ) {
            if ( valid ) {
              return "translate(" + x0( new Date( valid.start ) ) + "," + 0 + ")"; 
            } else {
              return "translate(0,0)";
            }
          });

        validEnter.append("rect")
          .attr("width", function( valid ) {
            return ( x0( new Date( valid.finish ) ) - x0( new Date( valid.start ) ) );
          })
          .attr("rx", "4")
          .attr("ry", "4")
          .attr("height", 20)
          .style("fill", "lightblue")
          .style("stroke", "darkblue")
          .style("stroke-width", "1")
          .style("opacity", "0.5")
          .style("stroke-dasharray", "5,5")

        // ================================================================================
        // Gantt layout - Linked Tasks
        // ================================================================================

        var linked = taskEnter.selectAll("g.linked")
          .data( function(node, index) { 
            if ( node.linked ) {
              return _.map( node.linked, function( linked ) { return { 
                  id: node.id
                , link: node.link  
                , idx: index  
                , name: node.name
                , start: linked.start
                , finish: linked.finish  
              } } );
            } else {
              return [];
            }
          })

        var linkedEnter = linked.enter()
          .append("svg:g")
          .attr("class", "linked")
          .attr("transform", function( linked ) {
            if ( linked ) {
              return "translate(" + x0( new Date( linked.start ) ) + "," + 0 + ")"; 
            } else {
              return "translate(0,0)";
            }
          });

        linkedEnter.append("rect")
          .attr("width", function( linked ) {
            return ( x0( new Date( linked.finish ) ) - x0( new Date( linked.start ) ) );
          })
          .attr("height", 20)
          .attr("rx", "4")
          .attr("ry", "4")
          .style("fill", "lightsteelblue");

        // ================================================================================
        // Task Exit Strategy
        // ================================================================================

        tasks.transition()
          .duration(duration)
          .attr("transform", function(d) { 
            return "translate(" + d.x + "," + d.y + ")"; 
          })
          .style("opacity", 1);
         

        // tasks.transition()
        //   .duration(duration)
        //   .attr("transform", function(d) { 
        //     return "translate(" + d.x + "," + d.y + ")"; 
        //   })
        //   .style("opacity", 1)
        //   .select("rect")
        //   .style("fill", "lightsteelblue");
        
        var taskExit = tasks.exit().transition()
          .duration(duration)
          .attr("transform", function(d) { 
            return "translate(" + d.x0 + "," + d.y0 + ")"; 
          })
          .style("opacity", 1e-6)
          .remove();

        // taskExit.select("circle")
        //   .attr("r", 1e-6);

        nodes.forEach(function(d) {
          d.x0 = d.x;
          d.y0 = d.y;
        });
      }

      var socket = io.connect('http://192.168.1.3:3001/gantt', {});
      socket.on('connect', function () {
        socket.emit('query', {
          id   : '<%= parent %>',
          name : '<%= name %>',
          from : new Date( '<%= from %>' ),
          to   : new Date( '<%= to %>' )
        });
        socket.on("update", function( json ) {
          json.x0 = 0;
          json.y0 = 0;
/*
          console.log( "#############" );
          console.log( json );
          console.log( root );
          console.log( "#############" );
*/
          merge.copy( json, root, function( a ) {
            return function( b ) {
              if ( a.id && b.id )
              {
                return a.id == b.id;
              } else {
                return _.isEqual( a, b );
              }
            }
          });
          console.log( root );
          json.x0 = 0;
          json.y0 = 0;
          draw( root )
        });
      });

    </script>
  </body>
</html>