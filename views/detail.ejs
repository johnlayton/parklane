<!-- <!DOCTYPE html> -->
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/table.css' />
  </head>
  <body>

    <div id="chart">
    </div>

    <script src="/browserify.js"></script>
    <script>

      var d3 = require('d3');
      var _  = require('underscore');
      var $  = require('jquery-browserify');
      var traverse = require('traverse');

      var m = [20, 20, 20, 20],
          w = 1280 - m[1] - m[3],
          h =  800 - m[0] - m[2],
          i = 0,
          duration = 500,
          root;

      var tree = d3.layout.tree();

      var table = d3.select("#chart").append("table");

      var thead = table.append("thead");
      var tbody = table.append("tbody");

      thead.append("tr")

      $.ajax({
        url: '../json/<%= parent %>',
        dataType: 'json',
        data: { 
          name: '<%= name %>',
          from: new Date( '<%= from %>' ).toJSON(),
          to:   new Date( '<%= to %>' ).toJSON() 
        },
        success: function(json) {
          json.x0 = 0;
          json.y0 = 0;
          draw( root = json )
        }
      });


      function label( node ) {
        return node.name;
      }

      function collapse( d ) {
        if ( d.children ) {
          d._children = d.children;
          d._children.forEach( collapse );
          d.children = null;
        }
        return root
      }

      function click( d ) {
        if ( d.children ) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        draw( root );
      }

      function draw( data ) {

        var labels = _.uniq( _.map( traverse(data).reduce(function (acc, x) {
            if (this.key == 'detail') {
              acc.push(x);
            }
            return _.flatten( acc );
        }, []), function( node ) { return node.name; }) );

        console.log( labels );

        var columns = [{ style: "fixed", label: "id" }].concat( _.map( labels, function( label ) { 
          return { style: "float", label: label }; 
        }))

        var nodes = tree.nodes( data ).sort();

        var ths = thead.selectAll("tr").selectAll("th")
            .data( columns )
        
        var th = ths.enter()
            .append("th")
              .text(          function( column ) { return column.label; })
              .attr( "class", function( column ) { return column.style; });

        var trs = tbody.selectAll("tr")
            .data(nodes, function(d) { 
              return d.depth + "." + d.id || ( d.id = ++i )
            });

        var tr = trs.enter()
            .append("tr")
            .on("click", click);

        trs.order();

        var tds = tr.selectAll("td")
            .data( function( node ) {
              return _.map( columns, function( column ) {
                if( column.label === 'id' )
                {
                  return { style: column.style + " indent_" + node.depth, value: node.name };
                }
                else
                {
                  var property = _.find( node.detail, function( elem ) { return elem.name == column.label } ) || { value: "-" };
                  return { style: column.style, value: property ? property.value : '' };
                }
              });
            })

        var td = tds.enter()
            .append("td")
                .text(         function( column ) { return column.value; })
                .attr("class", function( column ) { return column.style; });

        trs.exit().remove();
      }
    </script>

  </body>
</html>
